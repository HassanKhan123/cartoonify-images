{"version":3,"sources":["xord.jpg","background2.jpg","background3.jpg","background4.jpeg","App.js","index.js"],"names":["App","useState","setFullFile","setModel","files","setFile","originalFile","setOriginalFile","convertedImage","setConvertedImage","setCartoonImg","setFinalImg","loading","setLoading","Background1","imageRef","useRef","canvasRef","model","size","source","current","canvas","path","setApp","url","a","window","tf","loadGraphModel","console","log","img","browser","fromPixels","shape","w","h","normalize","t0","performance","now","timer","predict","batchSize","result","squeeze","sub","scalar","div","clipByValue","img_out","pad","Math","round","abs","max","slice","draw","warn","useEffect","loadModel","convertBase64","file","Promise","resolve","reject","fileReader","FileReader","readAsDataURL","onload","onerror","error","uploadImage","e","target","base64","URL","createObjectURL","removeBg","preventDefault","image","resizeBilinear","reshape","offset","scaleby","toPixels","setTimeout","pct","tmpcan","document","createElement","tctx","getContext","cw","width","ch","height","drawImage","toDataURL","scaleCanvas","className","onSubmit","type","onChange","src","ref","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ea95e45f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/xord.b85d76ef.jpg\";","export default __webpack_public_path__ + \"static/media/background2.d87d71e9.jpg\";","export default __webpack_public_path__ + \"static/media/background3.ac12a8bc.jpg\";","export default __webpack_public_path__ + \"static/media/background4.f96f2c2c.jpeg\";","import React, { useState, useRef, useEffect } from 'react';\n\nimport {\n  RemoveBgResult,\n  RemoveBgError,\n  removeBackgroundFromImageFile,\n  removeBackgroundFromImageUrl,\n  removeBackgroundFromImageBase64,\n} from 'remove.bg';\nimport html2canvas from 'html2canvas';\n\nimport axios from 'axios';\nimport Background1 from './xord.jpg';\nimport Background2 from './background2.jpg';\nimport Background3 from './background3.jpg';\nimport Background4 from './background4.jpeg';\n\n// let model = require('./models/CartoonGAN/web-uint8/model.json');\nimport modelURL from './CartoonGAN/web-uint8/model.json';\n\nconst App = () => {\n  // console.log(model);\n  const [fullFile, setFullFile] = useState(null);\n  const [model, setModel] = useState();\n  const [files, setFile] = useState(null);\n  const [originalFile, setOriginalFile] = useState(null);\n  const [convertedImage, setConvertedImage] = useState(null);\n  const [cartoonImg, setCartoonImg] = useState(null);\n  const [finalImg, setFinalImg] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [bg, setBg] = useState(Background1);\n  const [finalImageURL, setFinalImgURL] = useState(null);\n\n  const imageRef = useRef(null);\n  const canvasRef = useRef(null);\n  const [App, setApp] = useState({\n    model: '',\n    size: 384,\n    source: imageRef.current,\n    canvas: canvasRef.current,\n    path: '',\n    // path: model,\n  });\n\n  useEffect(() => {\n    if (convertedImage) {\n      loadModel();\n    }\n  }, [convertedImage]);\n\n  async function loadModel(url) {\n    setLoading(true);\n    try {\n      const model = await window.tf.loadGraphModel(\n        // modelURL,\n        // 'http://127.0.0.1:8080/CartoonGAN/web-uint8/model.json',\n        // 'http://127.0.0.1:8081/CartoonGAN/web-uint8/model.json',\n        // 'https://gitex-demo.web.app/CartoonGAN/web-uint8/model.json',\n        // 'http://localhost:5000/',\n        'https://firebasestorage.googleapis.com/v0/b/gitex-demo.appspot.com/o/models%2Fmodel.json?alt=media&token=64bd8fa4-815f-4e3b-8140-8a2f5d8ba617',\n      );\n\n      setApp({\n        ...App,\n        model,\n      });\n\n      // predict(imageRef.current, model);\n      try {\n        console.log('PREDICT RAN============================');\n        let img = window.tf.browser.fromPixels(imageRef.current);\n        const shape = img.shape;\n        const [w, h] = shape;\n        img = normalize(img);\n        console.log('PRED');\n        const t0 = performance.now();\n        const timer = performance.now() - t0;\n        let img_out;\n\n        try {\n          const result = await model.predict(img, { batchSize: 1 });\n          console.log('RES================', result);\n          img_out = await result\n            .squeeze()\n            .sub(window.tf.scalar(-1))\n            .div(window.tf.scalar(2))\n            .clipByValue(0, 1);\n          const pad = Math.round((Math.abs(w - h) / Math.max(w, h)) * App.size);\n          const slice = w > h ? [0, pad, 0] : [pad, 0, 0];\n          img_out = img_out.slice(slice);\n          console.log('IMAGE OUT,', img_out, shape);\n          draw(img_out, shape);\n          console.log(Math.round((timer / 1000) * 10) / 10);\n          console.log('RESULT=============', img);\n        } catch (error) {\n          console.log('ERROR============', error);\n        }\n      } catch (error) {\n        console.log('ERRR===================', error);\n        console.warn('WARN ==================', error);\n        setConvertedImage(null);\n      }\n\n      setModel(url);\n      console.log('Load model success');\n    } catch (err) {\n      setConvertedImage(null);\n      console.log(err);\n      setLoading(false);\n    }\n  }\n\n  // http-server -c1 --cors .\n\n  const convertBase64 = file => {\n    return new Promise((resolve, reject) => {\n      const fileReader = new FileReader();\n      fileReader.readAsDataURL(file);\n      fileReader.onload = () => {\n        resolve(fileReader.result);\n      };\n      fileReader.onerror = error => {\n        reject(error);\n      };\n    });\n  };\n\n  const uploadImage = async e => {\n    let files = e.target.files[0];\n    console.log('FILES===================', files);\n    setFullFile(files);\n    const base64 = await convertBase64(files);\n    setOriginalFile(base64);\n\n    setFile(URL.createObjectURL(files));\n  };\n\n  const removeBg = async e => {\n    e.preventDefault();\n    // setFinalImg(originalFile);\n    setConvertedImage(originalFile);\n    // const options = {\n    //   method: 'POST',\n    //   headers: { 'Rm-Token': '61435e6389cc86.81026729' },\n    //   data: {\n    //     image_file: originalFile,\n    //   },\n    //   url: 'https://api.removal.ai/3.0/remove',\n    // };\n    // const data = await axios(options);\n    // console.log('DATA===========', data);\n\n    // console.log('DATA===============', data);\n  };\n  function normalize(img) {\n    const [w, h] = img.shape;\n    // pad\n    const pad =\n      w > h\n        ? [\n            [0, 0],\n            [w - h, 0],\n            [0, 0],\n          ]\n        : [\n            [h - w, 0],\n            [0, 0],\n            [0, 0],\n          ];\n    img = img.pad(pad);\n    const size = App.size;\n    img = window.tf.image\n      .resizeBilinear(img, [size, size])\n      .reshape([1, size, size, 3]);\n    const offset = window.tf.scalar(127.5);\n    return img.sub(offset).div(offset);\n  }\n\n  function draw(img, size) {\n    const scaleby = size[0] / img.shape[0];\n    window.tf.browser.toPixels(img, canvasRef.current);\n\n    setTimeout(() => scaleCanvas(scaleby), 50);\n  }\n\n  function scaleCanvas(pct = 2) {\n    setLoading(false);\n    const canvas = canvasRef.current;\n    console.log('CW===========', canvas);\n    const tmpcan = document.createElement('canvas');\n    const tctx = tmpcan.getContext('2d');\n    const cw = canvas.width;\n    const ch = canvas.height;\n    tmpcan.width = cw;\n    tmpcan.height = ch;\n    tctx.drawImage(canvas, 0, 0);\n    canvas.width *= pct;\n    canvas.height *= pct;\n    const ctx = canvas.getContext('2d');\n    ctx.drawImage(tmpcan, 0, 0, cw, ch, 0, 0, cw * pct, ch * pct);\n\n    console.log('object,', canvas.toDataURL('image/jpeg'));\n    setCartoonImg(canvas.toDataURL('image/jpeg'));\n    setFinalImg(canvas.toDataURL('image/jpeg'));\n\n    // setConvertedImage(canvas.toDataURL('image/jpeg'));\n    // removeBackgroundFromImageBase64({\n    //   base64img: canvas.toDataURL('image/jpeg'),\n    //   apiKey: 'H9MbXd7iFXGubSK38MvHfdUu',\n    //   size: 'full',\n    //   type: 'auto',\n    // })\n    //   .then(async result => {\n    //     console.log('RESULT======', result);\n    // setFinalImg('data:image/png;base64, ' + result.base64img);\n    //   })\n    //   .catch(errors => {\n    //     console.log(JSON.stringify(errors));\n    //     setLoading(false);\n    //   });\n    // App.download.href = canvas.toDataURL('image/jpeg');\n  }\n\n  const downloadImage = () => {\n    html2canvas(document.getElementById('finalImg')).then(canvas => {\n      console.log('CANVAS============', canvas.toDataURL());\n      canvas.toDataURL();\n\n      setFinalImgURL(canvas.toDataURL());\n    });\n  };\n\n  return (\n    <div className='App'>\n      <h1>Remove Background From Image</h1>\n      <form onSubmit={removeBg}>\n        <div>\n          <input type='file' onChange={uploadImage} />\n        </div>\n        {files && <img src={files} height={400} width={400} ref={imageRef} />}\n        <div>\n          <button>Remove Background</button>\n        </div>\n      </form>\n      {loading && <h3>Loading...</h3>}\n      <canvas ref={canvasRef}></canvas>\n      {/* 61435e6389cc86.81026729 */}\n      {/* {convertedImage && (\n        <div>\n          <h1>New Image</h1>\n          <div style={{ display: 'flex' }}>\n            {convertedImage && (\n              <img\n                src={convertedImage}\n                ref={imageRef}\n                height={400}\n                width={400}\n              />\n            )}\n          </div>\n        </div>\n      )} */}\n\n      {/* {convertedImage && (\n        <main>\n          <div\n            id='finalImg'\n            className='bg1'\n            style={{ backgroundImage: `url(${bg})` }}\n          >\n            <img src={convertedImage} />\n          </div>\n        </main>\n      )} */}\n      {/* {convertedImage && (\n        <div style={{ display: 'flex' }}>\n          <div\n            style={{\n              backgroundImage: `url(${Background1})`,\n              height: 700,\n              width: 500,\n            }}\n            onClick={() => setBg(Background1)}\n          ></div>\n          <div\n            style={{\n              backgroundImage: `url(${Background2})`,\n              height: 500,\n              width: 500,\n            }}\n            onClick={() => setBg(Background2)}\n          ></div>\n\n          <div\n            style={{\n              backgroundImage: `url(${Background3})`,\n              height: 500,\n              width: 500,\n            }}\n            onClick={() => setBg(Background3)}\n          ></div>\n          <div\n            style={{\n              backgroundImage: `url(${Background4})`,\n              height: 500,\n              width: 500,\n            }}\n            onClick={() => setBg(Background4)}\n          ></div>\n        </div>\n      )} */}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport './App.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}